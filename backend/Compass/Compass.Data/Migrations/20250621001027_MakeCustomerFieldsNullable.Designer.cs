// <auto-generated />
using System;
using Compass.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Compass.Data.Migrations
{
    [DbContext(typeof(CompassDbContext))]
    [Migration("20250621001027_MakeCustomerFieldsNullable")]
    partial class MakeCustomerFieldsNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Compass.Data.Entities.Assessment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssessmentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EnvironmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("OverallScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ReportBlobUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("Compass.Data.Entities.AssessmentFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssessmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstimatedEffort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Issue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recommendation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.ToTable("AssessmentFindings");
                });

            modelBuilder.Entity("Compass.Data.Entities.Customer", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CompanySize")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Industry")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTrialAccount")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("TrialEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TrialStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CustomerId");

                    b.HasIndex("CompanyName");

                    b.HasIndex("ContactEmail");

                    b.HasIndex("IsTrialAccount");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Compass.Data.Entities.Invoice", b =>
                {
                    b.Property<Guid>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("BillingPeriodEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("BillingPeriodStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentReference")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("InvoiceId");

                    b.HasIndex("DueDate");

                    b.HasIndex("InvoiceNumber")
                        .IsUnique();

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("CustomerId", "Status");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Compass.Data.Entities.LicenseFeature", b =>
                {
                    b.Property<Guid>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DefaultValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FeatureDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FeatureType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("FeatureId");

                    b.HasIndex("FeatureName")
                        .IsUnique();

                    b.ToTable("LicenseFeatures");

                    b.HasData(
                        new
                        {
                            FeatureId = new Guid("11111111-1111-1111-1111-111111111111"),
                            DefaultValue = "false",
                            FeatureDescription = "Run unlimited governance assessments",
                            FeatureName = "unlimited-assessments",
                            FeatureType = "Toggle",
                            IsActive = true
                        },
                        new
                        {
                            FeatureId = new Guid("22222222-2222-2222-2222-222222222222"),
                            DefaultValue = "false",
                            FeatureDescription = "Access to REST API endpoints",
                            FeatureName = "api-access",
                            FeatureType = "Toggle",
                            IsActive = true
                        },
                        new
                        {
                            FeatureId = new Guid("33333333-3333-3333-3333-333333333333"),
                            DefaultValue = "false",
                            FeatureDescription = "White-label portal with custom branding",
                            FeatureName = "white-label",
                            FeatureType = "Toggle",
                            IsActive = true
                        },
                        new
                        {
                            FeatureId = new Guid("44444444-4444-4444-4444-444444444444"),
                            DefaultValue = "false",
                            FeatureDescription = "Custom company branding and logos",
                            FeatureName = "custom-branding",
                            FeatureType = "Toggle",
                            IsActive = true
                        },
                        new
                        {
                            FeatureId = new Guid("55555555-5555-5555-5555-555555555555"),
                            DefaultValue = "false",
                            FeatureDescription = "Advanced reporting and analytics",
                            FeatureName = "advanced-analytics",
                            FeatureType = "Toggle",
                            IsActive = true
                        },
                        new
                        {
                            FeatureId = new Guid("66666666-6666-6666-6666-666666666666"),
                            DefaultValue = "email",
                            FeatureDescription = "Priority customer support",
                            FeatureName = "priority-support",
                            FeatureType = "Value",
                            IsActive = true
                        },
                        new
                        {
                            FeatureId = new Guid("77777777-7777-7777-7777-777777777777"),
                            DefaultValue = "false",
                            FeatureDescription = "Multi-tenant management capabilities",
                            FeatureName = "multi-tenant",
                            FeatureType = "Toggle",
                            IsActive = true
                        },
                        new
                        {
                            FeatureId = new Guid("88888888-8888-8888-8888-888888888888"),
                            DefaultValue = "3",
                            FeatureDescription = "Maximum Azure subscriptions allowed",
                            FeatureName = "max-subscriptions",
                            FeatureType = "Limit",
                            IsActive = true
                        },
                        new
                        {
                            FeatureId = new Guid("99999999-9999-9999-9999-999999999999"),
                            DefaultValue = "1",
                            FeatureDescription = "Maximum assessments per month",
                            FeatureName = "max-assessments-monthly",
                            FeatureType = "Limit",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Compass.Data.Entities.Subscription", b =>
                {
                    b.Property<Guid>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("AnnualPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("AutoRenew")
                        .HasColumnType("bit");

                    b.Property<string>("BillingCycle")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IncludesAPI")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludesCustomBranding")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludesWhiteLabel")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxAssessmentsPerMonth")
                        .HasColumnType("int");

                    b.Property<int>("MaxSubscriptions")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MonthlyPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("NextBillingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PlanType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SupportLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("NextBillingDate");

                    b.HasIndex("CustomerId", "Status");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Compass.Data.Entities.SubscriptionFeature", b =>
                {
                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FeatureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FeatureValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.HasKey("SubscriptionId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("SubscriptionFeatures");
                });

            modelBuilder.Entity("Compass.Data.Entities.UsageMetric", b =>
                {
                    b.Property<Guid>("UsageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BillingPeriod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MetricType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MetricValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UsageId");

                    b.HasIndex("RecordedDate");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("CustomerId", "BillingPeriod", "MetricType");

                    b.ToTable("UsageMetrics");
                });

            modelBuilder.Entity("Compass.Data.Entities.Assessment", b =>
                {
                    b.HasOne("Compass.Data.Entities.Customer", null)
                        .WithMany("Assessments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Compass.Data.Entities.AssessmentFinding", b =>
                {
                    b.HasOne("Compass.Data.Entities.Assessment", "Assessment")
                        .WithMany("Findings")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assessment");
                });

            modelBuilder.Entity("Compass.Data.Entities.Invoice", b =>
                {
                    b.HasOne("Compass.Data.Entities.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Compass.Data.Entities.Subscription", "Subscription")
                        .WithMany("Invoices")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Compass.Data.Entities.Subscription", b =>
                {
                    b.HasOne("Compass.Data.Entities.Customer", "Customer")
                        .WithMany("Subscriptions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Compass.Data.Entities.SubscriptionFeature", b =>
                {
                    b.HasOne("Compass.Data.Entities.LicenseFeature", "LicenseFeature")
                        .WithMany("SubscriptionFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Compass.Data.Entities.Subscription", "Subscription")
                        .WithMany("SubscriptionFeatures")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LicenseFeature");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Compass.Data.Entities.UsageMetric", b =>
                {
                    b.HasOne("Compass.Data.Entities.Customer", "Customer")
                        .WithMany("UsageMetrics")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Compass.Data.Entities.Subscription", "Subscription")
                        .WithMany("UsageMetrics")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Compass.Data.Entities.Assessment", b =>
                {
                    b.Navigation("Findings");
                });

            modelBuilder.Entity("Compass.Data.Entities.Customer", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("Invoices");

                    b.Navigation("Subscriptions");

                    b.Navigation("UsageMetrics");
                });

            modelBuilder.Entity("Compass.Data.Entities.LicenseFeature", b =>
                {
                    b.Navigation("SubscriptionFeatures");
                });

            modelBuilder.Entity("Compass.Data.Entities.Subscription", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("SubscriptionFeatures");

                    b.Navigation("UsageMetrics");
                });
#pragma warning restore 612, 618
        }
    }
}
