// <auto-generated />
using System;
using Compass.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Compass.Data.Migrations
{
    [DbContext(typeof(CompassDbContext))]
    partial class CompassDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Compass.Data.Entities.Assessment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssessmentCategory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("ResourceGovernance");

                    b.Property<string>("AssessmentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("AzureEnvironmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EnvironmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("OverallScore")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("ReportBlobUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UseClientPreferences")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentCategory")
                        .HasDatabaseName("IX_Assessments_AssessmentCategory");

                    b.HasIndex("AzureEnvironmentId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("AssessmentCategory", "AssessmentType")
                        .HasDatabaseName("IX_Assessments_Category_Type");

                    b.HasIndex("OrganizationId", "AssessmentCategory")
                        .HasDatabaseName("IX_Assessments_Organization_Category");

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("Compass.Data.Entities.AssessmentFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssessmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstimatedEffort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Issue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recommendation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.ToTable("AssessmentFindings");
                });

            modelBuilder.Entity("Compass.Data.Entities.AssessmentResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssessmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Environment")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Kind")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourceGroup")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ResourceId")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ResourceTypeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Sku")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubscriptionId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TagCount")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("{}");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId")
                        .HasDatabaseName("IX_AssessmentResources_AssessmentId");

                    b.HasIndex("AssessmentId", "Location")
                        .HasDatabaseName("IX_AssessmentResources_AssessmentId_Location");

                    b.HasIndex("AssessmentId", "ResourceGroup")
                        .HasDatabaseName("IX_AssessmentResources_AssessmentId_ResourceGroup");

                    b.HasIndex("AssessmentId", "ResourceTypeName")
                        .HasDatabaseName("IX_AssessmentResources_AssessmentId_ResourceTypeName");

                    b.ToTable("AssessmentResources");
                });

            modelBuilder.Entity("Compass.Data.Entities.AzureEnvironment", b =>
                {
                    b.Property<Guid>("AzureEnvironmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvailablePermissions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CostManagementLastChecked")
                        .HasColumnType("datetime2");

                    b.Property<string>("CostManagementLastError")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CostManagementSetupStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("HasCostManagementAccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastAccessDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastConnectionError")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("LastConnectionTest")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastConnectionTestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MissingPermissions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServicePrincipalId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ServicePrincipalName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.PrimitiveCollection<string>("SubscriptionIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("AzureEnvironmentId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TenantId");

                    b.HasIndex("ClientId", "HasCostManagementAccess");

                    b.ToTable("AzureEnvironments");
                });

            modelBuilder.Entity("Compass.Data.Entities.Client", b =>
                {
                    b.Property<Guid>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ContactName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("ContractEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ContractStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedByCustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Industry")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid?>("LastModifiedByCustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Settings")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Active");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ClientId");

                    b.HasIndex("CreatedByCustomerId");

                    b.HasIndex("LastModifiedByCustomerId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("Name", "OrganizationId");

                    b.HasIndex("Status", "IsActive");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Compass.Data.Entities.ClientAccess", b =>
                {
                    b.Property<Guid>("ClientAccessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessLevel")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Read");

                    b.Property<bool>("CanCreateAssessments")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("CanDeleteAssessments")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("CanExportData")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("CanManageEnvironments")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("CanViewAssessments")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("CanViewReports")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GrantedByCustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ClientAccessId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("GrantedByCustomerId");

                    b.HasIndex("CustomerId", "ClientId")
                        .IsUnique();

                    b.ToTable("ClientAccess");
                });

            modelBuilder.Entity("Compass.Data.Entities.ClientPreferences", b =>
                {
                    b.Property<Guid>("ClientPreferencesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AcceptedCompanyNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AllowedNamingPatterns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ComplianceFrameworks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComponentDefinitions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedByCustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CustomTags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EnforceTagCompliance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("EnvironmentIndicatorLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EnvironmentIndicators")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("EnvironmentSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid?>("LastModifiedByCustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NamingSchemeConfiguration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NamingStyle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NoSpecificRequirements")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrganizationMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequiredNamingElements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequiredTags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedCompliances")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedTags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceAbbreviations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaggingApproach")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientPreferencesId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedByCustomerId");

                    b.HasIndex("LastModifiedByCustomerId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ClientId", "OrganizationId")
                        .IsUnique();

                    b.HasIndex("IsActive", "OrganizationId");

                    b.ToTable("ClientPreferences");
                });

            modelBuilder.Entity("Compass.Data.Entities.Customer", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanySize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("EmailVerificationExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailVerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Industry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMfaEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTrialAccount")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastLoginIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastMfaUsedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MfaBackupCodes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MfaSecret")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MfaSetupDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("PasswordResetExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequireMfaSetup")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Owner");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TrialEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TrialStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CustomerId");

                    b.HasIndex("CompanyName");

                    b.HasIndex("Email");

                    b.HasIndex("IsTrialAccount");

                    b.HasIndex("OrganizationId", "Role");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Compass.Data.Entities.Invoice", b =>
                {
                    b.Property<Guid>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("BillingPeriodEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("BillingPeriodStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentReference")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("InvoiceId");

                    b.HasIndex("DueDate");

                    b.HasIndex("InvoiceNumber")
                        .IsUnique();

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("CustomerId", "Status");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Compass.Data.Entities.LicenseFeature", b =>
                {
                    b.Property<Guid>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DefaultValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FeatureDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FeatureType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("FeatureId");

                    b.HasIndex("FeatureName")
                        .IsUnique();

                    b.ToTable("LicenseFeatures");

                    b.HasData(
                        new
                        {
                            FeatureId = new Guid("11111111-1111-1111-1111-111111111111"),
                            DefaultValue = "false",
                            FeatureDescription = "Run unlimited governance assessments",
                            FeatureName = "unlimited-assessments",
                            FeatureType = "Toggle",
                            IsActive = true
                        },
                        new
                        {
                            FeatureId = new Guid("22222222-2222-2222-2222-222222222222"),
                            DefaultValue = "false",
                            FeatureDescription = "Access to REST API endpoints",
                            FeatureName = "api-access",
                            FeatureType = "Toggle",
                            IsActive = true
                        },
                        new
                        {
                            FeatureId = new Guid("33333333-3333-3333-3333-333333333333"),
                            DefaultValue = "false",
                            FeatureDescription = "White-label portal with custom branding",
                            FeatureName = "white-label",
                            FeatureType = "Toggle",
                            IsActive = true
                        },
                        new
                        {
                            FeatureId = new Guid("44444444-4444-4444-4444-444444444444"),
                            DefaultValue = "false",
                            FeatureDescription = "Custom company branding and logos",
                            FeatureName = "custom-branding",
                            FeatureType = "Toggle",
                            IsActive = true
                        },
                        new
                        {
                            FeatureId = new Guid("55555555-5555-5555-5555-555555555555"),
                            DefaultValue = "false",
                            FeatureDescription = "Advanced reporting and analytics",
                            FeatureName = "advanced-analytics",
                            FeatureType = "Toggle",
                            IsActive = true
                        },
                        new
                        {
                            FeatureId = new Guid("66666666-6666-6666-6666-666666666666"),
                            DefaultValue = "email",
                            FeatureDescription = "Priority customer support",
                            FeatureName = "priority-support",
                            FeatureType = "Value",
                            IsActive = true
                        },
                        new
                        {
                            FeatureId = new Guid("77777777-7777-7777-7777-777777777777"),
                            DefaultValue = "false",
                            FeatureDescription = "Multi-tenant management capabilities",
                            FeatureName = "multi-tenant",
                            FeatureType = "Toggle",
                            IsActive = true
                        },
                        new
                        {
                            FeatureId = new Guid("88888888-8888-8888-8888-888888888888"),
                            DefaultValue = "3",
                            FeatureDescription = "Maximum Azure subscriptions allowed",
                            FeatureName = "max-subscriptions",
                            FeatureType = "Limit",
                            IsActive = true
                        },
                        new
                        {
                            FeatureId = new Guid("99999999-9999-9999-9999-999999999999"),
                            DefaultValue = "1",
                            FeatureDescription = "Maximum assessments per month",
                            FeatureName = "max-assessments-monthly",
                            FeatureType = "Limit",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Compass.Data.Entities.LoginActivity", b =>
                {
                    b.Property<Guid>("LoginActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Browser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeviceType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastActivityTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LoginMethod")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Password");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LogoutTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("MfaUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("OperatingSystem")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecurityNotes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Active");

                    b.Property<bool>("SuspiciousActivity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("LoginActivityId");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("IX_LoginActivities_CustomerId");

                    b.HasIndex("IpAddress")
                        .HasDatabaseName("IX_LoginActivities_IpAddress");

                    b.HasIndex("LoginTime")
                        .HasDatabaseName("IX_LoginActivities_LoginTime");

                    b.HasIndex("CustomerId", "SessionId")
                        .HasDatabaseName("IX_LoginActivities_CustomerId_SessionId");

                    b.HasIndex("SuspiciousActivity", "LoginTime")
                        .HasDatabaseName("IX_LoginActivities_SuspiciousActivity_LoginTime");

                    b.HasIndex("CustomerId", "IsActive", "Status")
                        .HasDatabaseName("IX_LoginActivities_CustomerId_IsActive_Status");

                    b.ToTable("LoginActivities");
                });

            modelBuilder.Entity("Compass.Data.Entities.Organization", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsTrialOrganization")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OrganizationType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("MSP");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Settings")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Active");

                    b.Property<string>("TimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TrialEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TrialStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OrganizationId");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("Status", "OrganizationType");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Compass.Data.Entities.Subscription", b =>
                {
                    b.Property<Guid>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("AnnualPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("ApiAccess")
                        .HasColumnType("bit");

                    b.Property<bool>("AutoRenew")
                        .HasColumnType("bit");

                    b.Property<string>("BillingCycle")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("CustomReporting")
                        .HasColumnType("bit");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IncludesAPI")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludesCustomBranding")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludesWhiteLabel")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastBillingDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaxAssessmentsPerMonth")
                        .HasColumnType("int");

                    b.Property<int?>("MaxEnvironments")
                        .HasColumnType("int");

                    b.Property<int?>("MaxSubscriptions")
                        .HasColumnType("int");

                    b.Property<int?>("MaxUsersPerEnvironment")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MonthlyPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("NextBillingDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PlanType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("PrioritySupport")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("SupportIncluded")
                        .HasColumnType("bit");

                    b.Property<string>("SupportLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("TrialEndDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("ClientId");

                    b.HasIndex("NextBillingDate");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("CustomerId", "Status");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Compass.Data.Entities.SubscriptionFeature", b =>
                {
                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FeatureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FeatureValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.HasKey("SubscriptionId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("SubscriptionFeatures");
                });

            modelBuilder.Entity("Compass.Data.Entities.TeamInvitation", b =>
                {
                    b.Property<Guid>("InvitationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AcceptedByCustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AcceptedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvitationMessage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("InvitationToken")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("InvitedByCustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InvitedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvitedEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("InvitedRole")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.HasKey("InvitationId");

                    b.HasIndex("AcceptedByCustomerId");

                    b.HasIndex("ExpirationDate");

                    b.HasIndex("InvitationToken")
                        .IsUnique();

                    b.HasIndex("InvitedByCustomerId");

                    b.HasIndex("InvitedEmail");

                    b.HasIndex("OrganizationId", "Status");

                    b.ToTable("TeamInvitations");
                });

            modelBuilder.Entity("Compass.Data.Entities.UsageMetric", b =>
                {
                    b.Property<Guid>("UsageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BillingPeriod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MetricType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MetricValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UsageId");

                    b.HasIndex("RecordedDate");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("CustomerId", "BillingPeriod", "MetricType");

                    b.ToTable("UsageMetrics");
                });

            modelBuilder.Entity("Compass.Data.Entities.UsageRecord", b =>
                {
                    b.Property<Guid>("UsageRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssessmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BillingMonth")
                        .HasColumnType("int");

                    b.Property<int>("BillingYear")
                        .HasColumnType("int");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("EnvironmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UsageDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UsageType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UsageRecordId");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("EnvironmentId");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("UsageDate");

                    b.HasIndex("CustomerId", "BillingMonth", "BillingYear");

                    b.ToTable("UsageRecords");
                });

            modelBuilder.Entity("Compass.Data.Entities.Assessment", b =>
                {
                    b.HasOne("Compass.Data.Entities.AzureEnvironment", null)
                        .WithMany("Assessments")
                        .HasForeignKey("AzureEnvironmentId");

                    b.HasOne("Compass.Data.Entities.Client", "Client")
                        .WithMany("Assessments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Compass.Data.Entities.Customer", "Customer")
                        .WithMany("Assessments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Compass.Data.Entities.Organization", "Organization")
                        .WithMany("Assessments")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Client");

                    b.Navigation("Customer");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Compass.Data.Entities.AssessmentFinding", b =>
                {
                    b.HasOne("Compass.Data.Entities.Assessment", "Assessment")
                        .WithMany("Findings")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assessment");
                });

            modelBuilder.Entity("Compass.Data.Entities.AssessmentResource", b =>
                {
                    b.HasOne("Compass.Data.Entities.Assessment", "Assessment")
                        .WithMany("Resources")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assessment");
                });

            modelBuilder.Entity("Compass.Data.Entities.AzureEnvironment", b =>
                {
                    b.HasOne("Compass.Data.Entities.Client", "Client")
                        .WithMany("AzureEnvironments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Compass.Data.Entities.Customer", "Customer")
                        .WithMany("AzureEnvironments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Compass.Data.Entities.Organization", null)
                        .WithMany("AzureEnvironments")
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Client");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Compass.Data.Entities.Client", b =>
                {
                    b.HasOne("Compass.Data.Entities.Customer", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByCustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Compass.Data.Entities.Customer", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedByCustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Compass.Data.Entities.Organization", "Organization")
                        .WithMany("Clients")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Compass.Data.Entities.ClientAccess", b =>
                {
                    b.HasOne("Compass.Data.Entities.Client", "Client")
                        .WithMany("ClientAccess")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Compass.Data.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Compass.Data.Entities.Customer", "GrantedBy")
                        .WithMany()
                        .HasForeignKey("GrantedByCustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Client");

                    b.Navigation("Customer");

                    b.Navigation("GrantedBy");
                });

            modelBuilder.Entity("Compass.Data.Entities.ClientPreferences", b =>
                {
                    b.HasOne("Compass.Data.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Compass.Data.Entities.Customer", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByCustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Compass.Data.Entities.Customer", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedByCustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Compass.Data.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Compass.Data.Entities.Customer", b =>
                {
                    b.HasOne("Compass.Data.Entities.Organization", "Organization")
                        .WithMany("Members")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Compass.Data.Entities.Invoice", b =>
                {
                    b.HasOne("Compass.Data.Entities.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Compass.Data.Entities.Subscription", "Subscription")
                        .WithMany("Invoices")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Compass.Data.Entities.LoginActivity", b =>
                {
                    b.HasOne("Compass.Data.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Compass.Data.Entities.Organization", b =>
                {
                    b.HasOne("Compass.Data.Entities.Customer", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Compass.Data.Entities.Subscription", b =>
                {
                    b.HasOne("Compass.Data.Entities.Client", "Client")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Compass.Data.Entities.Customer", "Customer")
                        .WithMany("Subscriptions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Compass.Data.Entities.Organization", "Organization")
                        .WithMany("Subscriptions")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Client");

                    b.Navigation("Customer");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Compass.Data.Entities.SubscriptionFeature", b =>
                {
                    b.HasOne("Compass.Data.Entities.LicenseFeature", "LicenseFeature")
                        .WithMany("SubscriptionFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Compass.Data.Entities.Subscription", "Subscription")
                        .WithMany("SubscriptionFeatures")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LicenseFeature");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Compass.Data.Entities.TeamInvitation", b =>
                {
                    b.HasOne("Compass.Data.Entities.Customer", "AcceptedBy")
                        .WithMany("AcceptedInvitations")
                        .HasForeignKey("AcceptedByCustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Compass.Data.Entities.Customer", "InvitedBy")
                        .WithMany("SentInvitations")
                        .HasForeignKey("InvitedByCustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Compass.Data.Entities.Organization", "Organization")
                        .WithMany("TeamInvitations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcceptedBy");

                    b.Navigation("InvitedBy");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Compass.Data.Entities.UsageMetric", b =>
                {
                    b.HasOne("Compass.Data.Entities.Customer", "Customer")
                        .WithMany("UsageMetrics")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Compass.Data.Entities.Subscription", "Subscription")
                        .WithMany("UsageMetrics")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Compass.Data.Entities.UsageRecord", b =>
                {
                    b.HasOne("Compass.Data.Entities.Assessment", "Assessment")
                        .WithMany()
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Compass.Data.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Compass.Data.Entities.AzureEnvironment", "AzureEnvironment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Compass.Data.Entities.Subscription", "Subscription")
                        .WithMany("UsageRecords")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Assessment");

                    b.Navigation("AzureEnvironment");

                    b.Navigation("Customer");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Compass.Data.Entities.Assessment", b =>
                {
                    b.Navigation("Findings");

                    b.Navigation("Resources");
                });

            modelBuilder.Entity("Compass.Data.Entities.AzureEnvironment", b =>
                {
                    b.Navigation("Assessments");
                });

            modelBuilder.Entity("Compass.Data.Entities.Client", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("AzureEnvironments");

                    b.Navigation("ClientAccess");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Compass.Data.Entities.Customer", b =>
                {
                    b.Navigation("AcceptedInvitations");

                    b.Navigation("Assessments");

                    b.Navigation("AzureEnvironments");

                    b.Navigation("Invoices");

                    b.Navigation("SentInvitations");

                    b.Navigation("Subscriptions");

                    b.Navigation("UsageMetrics");
                });

            modelBuilder.Entity("Compass.Data.Entities.LicenseFeature", b =>
                {
                    b.Navigation("SubscriptionFeatures");
                });

            modelBuilder.Entity("Compass.Data.Entities.Organization", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("AzureEnvironments");

                    b.Navigation("Clients");

                    b.Navigation("Members");

                    b.Navigation("Subscriptions");

                    b.Navigation("TeamInvitations");
                });

            modelBuilder.Entity("Compass.Data.Entities.Subscription", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("SubscriptionFeatures");

                    b.Navigation("UsageMetrics");

                    b.Navigation("UsageRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
